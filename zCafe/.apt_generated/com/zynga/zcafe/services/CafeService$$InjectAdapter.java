// Code generated by dagger-compiler.  Do not edit.
package com.zynga.zcafe.services;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<CafeService>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code CafeService} and its
 * dependencies.
 *
 * Being a {@code Provider<CafeService>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<CafeService>} and handling injection
 * of annotated fields.
 */
public final class CafeService$$InjectAdapter extends Binding<CafeService>
    implements Provider<CafeService>, MembersInjector<CafeService> {
  private Binding<com.zynga.zcafe.inject.modules.CafeModule.MainThreadBus> parameter_bus;
  private Binding<com.zynga.zcafe.CafeApplication> field_app;
  private Binding<com.zynga.zcafe.inject.modules.CafeModule.MainThreadBus> field_bus;

  public CafeService$$InjectAdapter() {
    super("com.zynga.zcafe.services.CafeService", "members/com.zynga.zcafe.services.CafeService", NOT_SINGLETON, CafeService.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    parameter_bus = (Binding<com.zynga.zcafe.inject.modules.CafeModule.MainThreadBus>) linker.requestBinding("com.zynga.zcafe.inject.modules.CafeModule$MainThreadBus", CafeService.class, getClass().getClassLoader());
    field_app = (Binding<com.zynga.zcafe.CafeApplication>) linker.requestBinding("com.zynga.zcafe.CafeApplication", CafeService.class, getClass().getClassLoader());
    field_bus = (Binding<com.zynga.zcafe.inject.modules.CafeModule.MainThreadBus>) linker.requestBinding("com.zynga.zcafe.inject.modules.CafeModule$MainThreadBus", CafeService.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(parameter_bus);
    injectMembersBindings.add(field_app);
    injectMembersBindings.add(field_bus);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<CafeService>}.
   */
  @Override
  public CafeService get() {
    CafeService result = new CafeService(parameter_bus.get());
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<CafeService>}.
   */
  @Override
  public void injectMembers(CafeService object) {
    object.app = field_app.get();
    object.bus = field_bus.get();
  }
}
