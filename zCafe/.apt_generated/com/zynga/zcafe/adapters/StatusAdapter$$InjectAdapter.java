// Code generated by dagger-compiler.  Do not edit.
package com.zynga.zcafe.adapters;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;

/**
 * A {@code Binder<StatusAdapter>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code StatusAdapter} and its
 * dependencies.
 *
 * Being a {@code Provider<StatusAdapter>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<StatusAdapter>} and handling injection
 * of annotated fields.
 */
public final class StatusAdapter$$InjectAdapter extends Binding<StatusAdapter>
    implements MembersInjector<StatusAdapter> {
  private Binding<com.zynga.zcafe.inject.modules.CafeModule.MainThreadBus> bus;
  private Binding<com.zynga.zcafe.services.CafeService> service;

  public StatusAdapter$$InjectAdapter() {
    super(null, "members/com.zynga.zcafe.adapters.StatusAdapter", NOT_SINGLETON, StatusAdapter.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    bus = (Binding<com.zynga.zcafe.inject.modules.CafeModule.MainThreadBus>) linker.requestBinding("com.zynga.zcafe.inject.modules.CafeModule$MainThreadBus", StatusAdapter.class, getClass().getClassLoader());
    service = (Binding<com.zynga.zcafe.services.CafeService>) linker.requestBinding("com.zynga.zcafe.services.CafeService", StatusAdapter.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(bus);
    injectMembersBindings.add(service);
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<StatusAdapter>}.
   */
  @Override
  public void injectMembers(StatusAdapter object) {
    object.bus = bus.get();
    object.service = service.get();
  }
}
